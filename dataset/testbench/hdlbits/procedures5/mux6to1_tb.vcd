$date
	Mon Aug 25 16:24:50 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_top_module_always_case $end
$var wire 4 ! out [3:0] $end
$var reg 4 " data0 [3:0] $end
$var reg 4 # data1 [3:0] $end
$var reg 4 $ data2 [3:0] $end
$var reg 4 % data3 [3:0] $end
$var reg 4 & data4 [3:0] $end
$var reg 4 ' data5 [3:0] $end
$var reg 4 ( expected_out [3:0] $end
$var reg 3 ) sel [2:0] $end
$var integer 32 * i [31:0] $end
$var integer 32 + num_tests_passed [31:0] $end
$var integer 32 , total_tests [31:0] $end
$scope module dut $end
$var wire 4 - data0 [3:0] $end
$var wire 4 . data1 [3:0] $end
$var wire 4 / data2 [3:0] $end
$var wire 4 0 data3 [3:0] $end
$var wire 4 1 data4 [3:0] $end
$var wire 4 2 data5 [3:0] $end
$var wire 3 3 sel [2:0] $end
$var reg 4 4 out [3:0] $end
$upscope $end
$scope task check_result $end
$var reg 160 5 description [160:1] $end
$var reg 4 6 expected [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6
bx 5
b1010 4
b0 3
b1111 2
b1110 1
b1101 0
b1100 /
b1011 .
b1010 -
b0 ,
b0 +
b0 *
b0 )
b1010 (
b1111 '
b1110 &
b1101 %
b1100 $
b1011 #
b1010 "
b1010 !
$end
#10000
b1011 !
b1011 4
b1011 (
b1 )
b1 3
b1 *
b1 +
b1 ,
#20000
b1100 !
b1100 4
b1100 (
b10 )
b10 3
b10 *
b10 +
b10 ,
#30000
b1101 !
b1101 4
b1101 (
b11 )
b11 3
b11 *
b11 +
b11 ,
#40000
b1110 !
b1110 4
b1110 (
b100 )
b100 3
b100 *
b100 +
b100 ,
#50000
b1111 !
b1111 4
b1111 (
b101 )
b101 3
b101 *
b101 +
b101 ,
#60000
b0 !
b0 4
b0 (
b110 )
b110 3
b110 *
b110 +
b110 ,
#70000
b111 )
b111 3
b111 *
b111 +
b111 ,
#80000
b101 !
b101 4
b101 $
b101 /
b10 )
b10 3
b1000 *
b1000 +
b1000 ,
#90000
b1001 !
b1001 4
b1001 $
b1001 /
b1001 +
b1001 ,
b1000100011110010110111001100001011011010110100101100011001000000111010101110000011001000110000101110100011001010010000000110001 5
b101 6
#100000
b111 !
b111 4
b0 )
b0 3
b0 *
b111 '
b111 2
b111 &
b111 1
b111 %
b111 0
b111 $
b111 /
b111 #
b111 .
b111 "
b111 -
b1010 +
b1010 ,
b1000100011110010110111001100001011011010110100101100011001000000111010101110000011001000110000101110100011001010010000000110010 5
b1001 6
#110000
b1 )
b1 3
b1 *
b1011 ,
b1011 +
#120000
b10 )
b10 3
b10 *
b1100 ,
b1100 +
#130000
b11 )
b11 3
b11 *
b1101 ,
b1101 +
#140000
b100 )
b100 3
b100 *
b1110 ,
b1110 +
#150000
b101 )
b101 3
b101 *
b1111 ,
b1111 +
#160000
b0 !
b0 4
b0 )
b0 3
b101 '
b101 2
b100 &
b100 1
b11 %
b11 0
b10 $
b10 /
b1 #
b1 .
b0 "
b0 -
b0 *
b10000 ,
b10000 +
#162000
b1 !
b1 4
b1 )
b1 3
b1 *
#164000
b10 !
b10 4
b10 )
b10 3
b10 *
b1 (
#166000
b11 !
b11 4
b11 )
b11 3
b11 *
b10 (
#168000
b100 !
b100 4
b100 )
b100 3
b100 *
b11 (
#170000
b101 !
b101 4
b101 )
b101 3
b101 *
b100 (
#172000
b0 !
b0 4
b110 )
b110 3
b110 *
b101 (
#174000
b111 )
b111 3
b111 *
b0 (
#176000
b1111 !
b1111 4
b11 )
b11 3
b1111 %
b1111 0
b1000 *
#186000
b10001 ,
b10001 +
