$date
	Mon Aug 25 21:00:55 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_top_module_even_parity $end
$var wire 1 ! parity $end
$var reg 1 " expected_parity $end
$var reg 8 # in [7:0] $end
$var integer 32 $ i [31:0] $end
$var integer 32 % j [31:0] $end
$var integer 32 & num_tests_passed [31:0] $end
$var integer 32 ' ones_count [31:0] $end
$var integer 32 ( total_tests [31:0] $end
$scope function count_ones $end
$var reg 8 ) data [7:0] $end
$var integer 32 * i [31:0] $end
$upscope $end
$scope module dut $end
$var wire 8 + in [7:0] $end
$var wire 1 ! parity $end
$upscope $end
$scope task test_parity $end
$var reg 160 , description [160:1] $end
$var reg 8 - test_in [7:0] $end
$var integer 32 . ones [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx .
b0 -
b10000010110110001101100001000000111101001100101011100100110111101110011 ,
b0 +
bx *
bx )
b0 (
bx '
b0 &
bx %
bx $
b0 #
x"
0!
$end
#10000
b11111111 #
b11111111 +
b100000101101100011011000010000001101111011011100110010101110011 ,
b11111111 -
b1 &
b1 (
0"
b0 .
b1000 *
b0 )
#20000
1!
b1 #
b1 +
b1010011011010010110111001100111011011000110010100100000011000100110100101110100 ,
b1 -
b10 &
b10 (
b1000 .
b1000 *
b11111111 )
#30000
b10000000 #
b10000000 +
b100110101010011010000100010000001101111011011100110110001111001 ,
b10000000 -
b11 &
b11 (
1"
b1 .
b1000 *
b1 )
#40000
0!
b10101010 #
b10101010 +
b1000001011011000111010001100101011100100110111001100001011101000110100101101110011001110010000000110001 ,
b10101010 -
b100 &
b100 (
b1000 *
b10000000 )
#50000
b1010101 #
b1010101 +
b1000001011011000111010001100101011100100110111001100001011101000110100101101110011001110010000000110010 ,
b1010101 -
b101 &
b101 (
0"
b100 .
b1000 *
b10101010 )
#60000
b0 #
b0 +
b1100000010000001101111011011100110010101110011 ,
b0 -
b110 &
b110 (
b1000 *
b1010101 )
#70000
1!
b1 #
b1 +
b11000100100000011011110110111001100101 ,
b1 -
b111 &
b111 (
b0 .
b1000 *
b0 )
#80000
0!
b11 #
b11 +
b1100100010000001101111011011100110010101110011 ,
b11 -
b1000 &
b1000 (
1"
b1 .
b1000 *
b1 )
#90000
1!
b111 #
b111 +
b1100110010000001101111011011100110010101110011 ,
b111 -
b1001 &
b1001 (
0"
b10 .
b1000 *
b11 )
#100000
0!
b1111 #
b1111 +
b1101000010000001101111011011100110010101110011 ,
b1111 -
b1010 &
b1010 (
1"
b11 .
b1000 *
b111 )
#110000
1!
b11111 #
b11111 +
b1101010010000001101111011011100110010101110011 ,
b11111 -
b1011 &
b1011 (
0"
b100 .
b1000 *
b1111 )
#120000
0!
b111111 #
b111111 +
b1101100010000001101111011011100110010101110011 ,
b111111 -
b1100 &
b1100 (
1"
b101 .
b1000 *
b11111 )
#130000
1!
b1111111 #
b1111111 +
b1101110010000001101111011011100110010101110011 ,
b1111111 -
b1101 &
b1101 (
0"
b110 .
b1000 *
b111111 )
#140000
0!
b11111111 #
b11111111 +
b1110000010000001101111011011100110010101110011 ,
b11111111 -
b1110 &
b1110 (
1"
b111 .
b1000 *
b1111111 )
#150000
b0 #
b0 +
b1111 &
b1111 (
0"
b1000 .
b1000 *
b11111111 )
#160000
1!
b1 #
b1 +
#170000
0!
b11 #
b11 +
#180000
1!
b10 #
b10 +
#190000
b1000 %
b0 '
0!
b0 #
b0 +
b0 $
#200000
1"
b11 '
b1000 %
1!
b1101 #
b1101 +
b1101 $
b10000 &
b10000 (
#210000
b1000 %
b11 '
b11010 #
b11010 +
b11010 $
b10001 &
b10001 (
#220000
0"
b1000 %
b100 '
0!
b100111 #
b100111 +
b100111 $
b10010 &
b10010 (
#230000
1"
b1000 %
b11 '
1!
b110100 #
b110100 +
b110100 $
b10011 &
b10011 (
#240000
0"
b1000 %
b10 '
0!
b1000001 #
b1000001 +
b1000001 $
b10100 &
b10100 (
#250000
b1000 %
b100 '
b1001110 #
b1001110 +
b1001110 $
b10101 &
b10101 (
#260000
1"
b1000 %
b101 '
1!
b1011011 #
b1011011 +
b1011011 $
b10110 &
b10110 (
#270000
b1000 %
b11 '
b1101000 #
b1101000 +
b1101000 $
b10111 &
b10111 (
#280000
b1000 %
b101 '
b1110101 #
b1110101 +
b1110101 $
b11000 &
b11000 (
#290000
0"
b1000 %
b10 '
0!
b10000010 #
b10000010 +
b10000010 $
b11001 &
b11001 (
#300000
1"
b1000 %
b101 '
1!
b10001111 #
b10001111 +
b10001111 $
b11010 &
b11010 (
#310000
0"
b1000 %
b100 '
0!
b10011100 #
b10011100 +
b10011100 $
b11011 &
b11011 (
#320000
b1000 %
b100 '
b10101001 #
b10101001 +
b10101001 $
b11100 &
b11100 (
#330000
1"
b1000 %
b101 '
1!
b10110110 #
b10110110 +
b10110110 $
b11101 &
b11101 (
#340000
0"
b1000 %
b100 '
0!
b11000011 #
b11000011 +
b11000011 $
b11110 &
b11110 (
#350000
1"
b1000 %
b11 '
1!
b11010000 #
b11010000 +
b11010000 $
b11111 &
b11111 (
#360000
0"
b1000 %
b110 '
0!
b11011101 #
b11011101 +
b11011101 $
b100000 &
b100000 (
#370000
1"
b1000 %
b101 '
1!
b11101010 #
b11101010 +
b11101010 $
b100001 &
b100001 (
#380000
b1000 %
b111 '
b11110111 #
b11110111 +
b11110111 $
b100010 &
b100010 (
#390000
b10110101 #
b10110101 +
b100000100 $
b100011 &
b100011 (
#400000
0!
b10110111 #
b10110111 +
b101 '
b1000 *
b10110101 )
#410000
b11110000 #
b11110000 +
b10101010111000001110000011001010111001000100000011011100110100101100010011000100110110001100101 ,
b11110000 -
b110 '
b1000 *
b10110111 )
#420000
b1111 #
b1111 +
b10011000110111101110111011001010111001000100000011011100110100101100010011000100110110001100101 ,
b1111 -
b100100 &
b100100 (
0"
b100 .
b1000 *
b11110000 )
#430000
b11001100 #
b11001100 +
b10101000111011101101111001000000111000001100001011010010111001001110011 ,
b11001100 -
b100101 &
b100101 (
b1000 *
b1111 )
#440000
b10011001 #
b10011001 +
b10100110111100101101101011011010110010101110100011100100110100101100011 ,
b10011001 -
b100110 &
b100110 (
b1000 *
b11001100 )
#450000
b10101010 #
b10101010 +
b110000011110000100000101000001 ,
b10101010 -
b100111 &
b100111 (
b1000 *
b10011001 )
#460000
b1010101 #
b1010101 +
b110000011110000011010100110101 ,
b1010101 -
b101000 &
b101000 (
b1000 *
b10101010 )
#470000
b101001 &
b101001 (
b1000 *
b1010101 )
